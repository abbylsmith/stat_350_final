// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ThroughTree
int ThroughTree(List x, Rcpp::IntegerVector Node, Rcpp::CharacterVector Feature, Rcpp::NumericVector Split, Rcpp::IntegerVector Yes, Rcpp::IntegerVector No, Rcpp::IntegerVector Missing);
RcppExport SEXP _fbboost_ThroughTree(SEXP xSEXP, SEXP NodeSEXP, SEXP FeatureSEXP, SEXP SplitSEXP, SEXP YesSEXP, SEXP NoSEXP, SEXP MissingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Node(NodeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type Feature(FeatureSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Split(SplitSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Yes(YesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type No(NoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Missing(MissingSEXP);
    rcpp_result_gen = Rcpp::wrap(ThroughTree(x, Node, Feature, Split, Yes, No, Missing));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fbboost_ThroughTree", (DL_FUNC) &_fbboost_ThroughTree, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_fbboost(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
